function(compileshader shaderSrc outputDir)
  set(glsl ${CONAN_BIN_DIRS_GLSLANG}/glslangValidator)
  file(MAKE_DIRECTORY "${outputDir}")
  file(GLOB_RECURSE shaderSources "${shaderSrc}/*")
  set(extensions .vert .frag .geom .tesc .tese .comp .rchit .rgen .rmiss .rint)
  set(outputFiles)
  set(headers)
  foreach(file ${shaderSources})
    get_filename_component(ext ${file} LAST_EXT)
    if(ext STREQUAL .h)
      set(headers ${headers} ${file})
    endif()
  endforeach()
  foreach(file ${shaderSources})
    get_filename_component(fileName ${file} NAME)
    get_filename_component(ext ${file} LAST_EXT)
    get_filename_component(dir ${file} DIRECTORY)
    if(${ext} IN_LIST extensions)
      file(RELATIVE_PATH relativeFile "${shaderSrc}" "${file}")
      file(RELATIVE_PATH relativeDir "${shaderSrc}" "${dir}")
      string(REGEX REPLACE "[^a-zA-Z0-9]" "_" cxxName ${fileName})
      set(outptuFile ${outputDir}/${relativeDir}/${cxxName}.h)
      set(outputFiles ${outputFiles} ${outptuFile})
      add_custom_command(OUTPUT ${outptuFile}
        COMMAND ${CMAKE_COMMAND} -E make_directory "${outputDir}/${relativeDir}"
        COMMAND ${glsl} -V ${file} -o ${outptuFile} --vn ${cxxName}
        DEPENDS ${file} ${headers})
    endif()
  endforeach()
  add_custom_target(generateShaderHeaders ALL DEPENDS ${outputFiles})
  add_library(compileShader INTERFACE)
  target_include_directories(compileShader INTERFACE ${outputFiles})
  add_dependencies(compileShader generateShaderHeaders)
  if(${CMAKE_VERSION} VERSION_GREATER_EQUAL "3.16.0")
    target_precompile_headers(compileShader INTERFACE ${outputFiles})
  endif()
  #  add_custom_target(compileShader ALL DEPENDS ${outputFiles})
endfunction()