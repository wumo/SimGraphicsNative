#version 460
#extension GL_NV_ray_tracing : require
#extension GL_GOOGLE_include_directive : require

#include "../common.h"
#include "../tonemap.h"

layout(constant_id = 0) const int MAX_RECURSION = 1;

layout(set = 0, binding = 0) uniform accelerationStructureNV Scene;
layout(set = 0, binding = 1, rgba8) uniform image2D img;
layout(set = 0, binding = 2, r32f) uniform image2D depth;
layout(set = 1, binding = 0) uniform CameraSettingUniform { CameraSetting cam; };

layout(location = 0) rayPayloadNV RayPayload prd;

vec3 d(uint x, uint y, vec3 r, vec3 u, vec3 v) {
  vec2 p = (vec2(x, y) + vec2(0.5)) / gl_LaunchSizeNV.xy;
  vec2 c = p * 2.0 - 1.0;
  return normalize(v + c.x * r + c.y * u);
}

void dD(vec3 r, vec3 u, vec3 v, out vec3 dDdx, out vec3 dDdy) {
  vec3 _d = d(gl_LaunchIDNV.x, gl_LaunchIDNV.y, r, u, v);
  vec3 _r = d(gl_LaunchIDNV.x + 1, gl_LaunchIDNV.y, r, u, v) - _d;
  vec3 _u = d(gl_LaunchIDNV.x, gl_LaunchIDNV.y + 1, r, u, v) - _d;
  float temp = dot(_d, _d);
  float temp2 = pow(temp, 3.0 / 2);
  dDdx = (temp * _r - dot(_d, _r) * _d) / temp2;
  dDdy = (temp * _u - dot(_d, _u) * _d) / temp2;
}

void main() {
  if(gl_LaunchIDNV.z != 0) return;
  vec3 origin = vec3(cam.eye);
  float a = cam.fov.x / cam.fov.y;
  float f = tan(cam.fov.z / 2);
  vec3 r = cam.zNear * a * f * cam.r;
  vec3 u = -f * cam.zNear * normalize(cross(cam.r, cam.v));
  vec3 v = cam.zNear * cam.v;
  vec3 dir = d(gl_LaunchIDNV.x, gl_LaunchIDNV.y, r, u, v);

  vec3 dDdx, dDdy;
  dD(r, u, v, dDdx, dDdy);

  const uint rayFlags = gl_RayFlagsOpaqueNV;
  const uint cullMask = 0xFF;
  const float tmin = cam.zNear;
  const float tmax = cam.zFar;

  prd.recursion = 0;
  prd.maxRecursion = MAX_RECURSION;
  prd.dOdx = vec3(0);
  prd.dOdy = vec3(0);
  prd.dDdx = dDdx;
  prd.dDdy = dDdy;
  traceNV(Scene, rayFlags, cullMask, 0, 1, 0, origin, tmin, dir, tmax, 0);

  vec3 hitColor = prd.color;
  if(prd.hitT == 0) prd.hitT = cam.zFar;
  vec4 pos = cam.proj * cam.view * vec4(origin + prd.hitT * dir, 1.0);
  imageStore(
    img, ivec2(gl_LaunchIDNV.x, gl_LaunchIDNV.y),
    toneMap(vec4(hitColor, 1.0), cam.exposure));
  imageStore(depth, ivec2(gl_LaunchIDNV.x, gl_LaunchIDNV.y), vec4(pos.z, 0, 0, 0.0f));
}
